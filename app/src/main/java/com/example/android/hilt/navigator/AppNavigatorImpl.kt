/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.hilt.navigator

import android.widget.FrameLayout
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentActivity
import androidx.fragment.app.FragmentManager
import androidx.fragment.app.FragmentTransaction
import com.example.android.hilt.R
import com.example.android.hilt.ui.ButtonsFragment
import com.example.android.hilt.ui.LogsFragment
import javax.inject.Inject

/**
 * Navigator implementation. The Inject annotation Identifies injectable constructors, methods, and
 * fields. Constructors are injected first, followed by fields, and then methods. Fields and methods
 * in superclasses are injected before those in subclasses. Ordering of injection among fields and
 * among methods in the same class is not specified. Injectable constructors are annotated with
 * Inject and accept zero or more dependencies as arguments. Inject can apply to at most one
 * constructor per class. Note: because an AppNavigator instance is provided in the `Activity`
 * container , [FragmentActivity] is already available as a predefined binding.
 *
 * @param activity the [FragmentActivity] that the fragments we construct are to be associated with.
 * This constructor is automagically called by the AppNavigatorImpl_Factory.java factory class that
 * is generated by dagger. The `NavigationModule` abstract class Binds [AppNavigatorImpl] to be the
 * delegate of [AppNavigator] in its abstract method `bindNavigator`.
 */
class AppNavigatorImpl @Inject constructor(
    private val activity: FragmentActivity
) : AppNavigator {

    /**
     * Navigate to a given screen. First we initialize our [Fragment] variable `val fragment` to
     * a new instance of [ButtonsFragment] when our [screen] parameter is [Screens.BUTTONS] or a
     * new instance of [LogsFragment] is it is [Screens.LOGS]. Then we use the [FragmentManager]
     * for interacting with fragments associated with this activity to begin a [FragmentTransaction]
     * which we use to replace the current contents of the [FrameLayout] with ID `R.id.main_container`
     * with the [Fragment] `fragment`, then use that [FragmentTransaction] to add the transaction to
     * the back stack, using the canonical name of the underlying class of `fragment` as the name
     * for this back stack state, after which we call the [FragmentTransaction.commit] method of
     * tbe [FragmentTransaction] to schedule a commit of the transaction.
     *
     * @param screen which screen should we navigate to: [Screens.BUTTONS] or [Screens.LOGS]
     */
    override fun navigateTo(screen: Screens) {
        val fragment = when (screen) {
            Screens.BUTTONS -> ButtonsFragment()
            Screens.LOGS -> LogsFragment()
        }

        activity.supportFragmentManager.beginTransaction()
            .replace(R.id.main_container, fragment)
            .addToBackStack(fragment::class.java.canonicalName)
            .commit()
    }
}
